{
  "hash": "be2803e6307b2b64a2fda4e7a8924b9b",
  "result": {
    "markdown": "\n# 시계열 분해 {#sec-decomposition}\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## 전통적 시계열 분해 기법 {-}\n\n* 이동평균법에서 차수 $m$의 효과: `elecsales`\n\n이동평균법의 차수를 증가시키면, 더 많은 자료를 이용해서 평균값을 계산하게 되고, \n따라서 더 매끄러운 추세 곡선을 얻게 된다. \n`elecsales`에 $m$-MA를 적용시켜 얻은 결과를 원자료와 함께 그래프로 나타내 보자. \n우선 3-MA의 결과를 @fig-3-MA 에 나타내 보자. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nautoplot(elecsales, series = \"Data\") +\n  autolayer(ma(elecsales, 3), series = \"3-MA\") +\n  scale_color_manual(values = c(\"Data\" = \"blue\", \n                                \"3-MA\" = \"red\")) +\n  labs(title = \"3-MA\", color = NULL, y = NULL)\n```\n\n::: {.cell-output-display}\n![`elecsales`에 3-MA를 적용한 결과](2-decomposition_files/figure-html/fig-3-MA-1.png){#fig-3-MA width=672}\n:::\n:::\n\n\n3-MA의 결과는 원자료보다 매끄로운 형태를 보이고 있음을 알 수 있다. \n이제 차수 $m$을 증가시키면 어떤 결과를 얻게 되는지 @fig-m-effect-1 에서 살펴보자. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 <- autoplot(elecsales) + autolayer(ma(elecsales, 3), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"3-MA\")\np2 <- autoplot(elecsales) + autolayer(ma(elecsales, 5), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"5-MA\")\np3 <- autoplot(elecsales) + autolayer(ma(elecsales, 7), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"7-MA\")\np4 <- autoplot(elecsales) + autolayer(ma(elecsales, 9), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"9-MA\")\n(p1+p2)/(p3+p4)\n```\n\n::: {.cell-output-display}\n![`elecsales` 자료에 대한 차수 m의 효과](2-decomposition_files/figure-html/fig-m-effect-1-1.png){#fig-m-effect-1 width=768}\n:::\n:::\n\n\n\n이번에는 호주에서 1956년부터 2010년까지 분기별 맥주 생산량  자료인 `ausbeer`에 대하여 $2 \\times m$-MA를 적용한 결과를 원자료와 함께 @fig-m-effect-2 의 그래프로 나타내 보자. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 <- autoplot(ausbeer) + autolayer(ma(ausbeer, 4), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"4-MA\")\np2 <- autoplot(ausbeer) + autolayer(ma(ausbeer, 8), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"8-MA\")\np3 <- autoplot(ausbeer) + autolayer(ma(ausbeer, 12), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"12-MA\")\np4 <- autoplot(ausbeer) + autolayer(ma(ausbeer, 24), size = .8, color = \"red\") + \n  labs(y = NULL, title = \"24-MA\")\n(p1+p2)/(p3+p4)\n```\n\n::: {.cell-output-display}\n![`ausbeer` 자료에 대한 차수 m의 효과](2-decomposition_files/figure-html/fig-m-effect-2-1.png){#fig-m-effect-2 width=768}\n:::\n:::\n\n\n\n* 전통적 분해 기법 적용 예제: `fpp2::elecequip`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndecompose(elecequip) %>% \n  autoplot() \n```\n\n::: {.cell-output-display}\n![`elecequip` 자료에 대한 전통적 분해 기법 적용 결과](2-decomposition_files/figure-html/fig-decompose-1-1.png){#fig-decompose-1 width=672}\n:::\n:::\n\n\n각 패널의 오른쪽 끝에 높이가 동일한 막대를 배치하여, 각 성분의 상대적 크기를 쉽게 확인할 수 있게 하였다. \n불규칙 성분이 표시된 마지막 패널의 막대가 가장 크다는 것은 불규칙 성분의 크기가 가장 작다는 의미가 된다. \n또한 추세 성분의 처음과 마지막 6개월 자료는 `NA`가 되기 때문에 해당 기간에는 결과가 표시 되지 않았음을 알 수 있으고, \n계절 성분이 동일한 형태를 취하고 있음도 확인할 수 있다. \n\n\n## STL 분해 기법 {-}\n\n* STL 분해 기법 적용 예제: `fpp2::elecequip`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\np1 <- stl(elecequip, s.window = \"periodic\") %>% \n  autoplot() + labs(title = \"s.window = 'periodic'\")\np2 <- stl(elecequip, s.window = 5) %>% \n  autoplot() + labs(title = \"s.window = 5\")\np1 + p2\n```\n\n::: {.cell-output-display}\n![`elecequip` 자료에 대한 STL 분해 기법 적용 결과: `s.window`의 효과](2-decomposition_files/figure-html/fig-stl-1-1.png){#fig-stl-1 width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\np3 <- stl(elecequip, s.window = \"periodic\", t.window = 7) %>% \n  autoplot() + labs(title = \"t.window = 7\")\np4 <- stl(elecequip, s.window = \"periodic\", t.window = 11) %>% \n  autoplot() + labs(title = \"t.window = 11\")\np3 + p4\n```\n\n::: {.cell-output-display}\n![`elecequip` 자료에 대한 STL 분해 기법 적용 결과: `t.window`의 효과](2-decomposition_files/figure-html/fig-stl-2-1.png){#fig-stl-2 width=768}\n:::\n:::\n",
    "supporting": [
      "2-decomposition_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}