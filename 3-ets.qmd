# ETS 모형 {#sec-ets}

```{r}
#| echo: false
library(fpp2)
library(tidyverse)
```


## 전통적 지수평활법 {-}

-   Simple exponential smoothing 예제: `fpp2::oil`

`fpp2::oil`은 1965년부터 2013년까지 Saudi Arabia의 연간 원유 생산량 자료이다. 1996년 이후 자료에 대해 simple exponential smoothing을 적용해 보자.

```{r}
oil_1996 <- window(oil, start = 1996)
```

1996년 이후 연간 원유 생산량 자료의 시계열 그래프를 @fig-oil-1996 에 작성해 보자.

```{r}
#| label: fig-oil-1996
#| fig-cap: 1996년 이후 Saudi Arabia 연간 원유 생산량
autoplot(oil_1996) + 
  labs(title = "Annual oil production in Saudi Arabia", 
       y = NULL)
```

함수 `ses()`를 사용하여 2014년 \~ 2016년의 원유 생산량을 예측해 보자.

```{r}
ses(oil_1996, h = 3) %>% 
  summary()
```

Level에 대한 평활상수가 $\alpha =$ `r summary(ses(oil_1996, h = 3))$model$par[[1]] |> round(4)`으로 추정되었다는 것은 level에 큰 변화가 있는 자료를 의미한다. 이제 예측 결과를 @fig-oil-1996-fore 의 그래프로 나타내 보자.

```{r}
#| label: fig-oil-1996-fore
#| fig-cap: 1996년 이후 Saudi Arabia 연간 원유 생산량 및 2014년 이후 예측 결과
ses(oil_1996, h = 3) %>% 
  autoplot() + 
  labs(y = NULL)
```

파란 실선으로 표시된 예측값은 마지막 level 추정값으로써, 모든 `h`에 대하여 동일하다는 것을 알 수 있다. 예측값을 표시한 실선을 포함하고 있는 짙은 파란 색 영역은 80% 예측 구간을 표시한 것이고, 옅은 파란 색 영역은 95% 예측 구간을 표시한 것이다. 예측 시차가 증가함에 따라 예측 구간의 폭은 계속 넓어지고 있음을 알 수 있다.

-   Trend method 예제: `fpp2::ausair`

`fpp2::ausair`는 1970년부터 2016년까지 호주의 연간 항공기 승객 수 자료이다. Holt's linear trend와 damped Holt's trend 모형을 이용해서 예측을 실시해 보자.

먼저 시계열 그래프를 @fig-aus-air 에 작성해 보자.
상승 추세가 있는 것을 확인할 수 있다. 

```{r}
#| label: fig-aus-air
#| fig-cap: 1970년부터 2016년까지 호주의 연간 항공기 승객 수 
autoplot(ausair) +
  labs(title = "Air Transport Passengers Australia", 
       y = NULL)
```

Holt's linear trend 모형을 함수 `holt()`를 사용해서 적합시키고, 15 시차에 대한 예측 결과를 @fig-aus-air-fore1 에 나타내 보자.

```{r}
#| label: fig-aus-air-fore1
#| fig-cap: "`ausair` 자료에 대한 Holt's linear trend method의 예측 결과"
holt(ausair, h = 15) %>% 
  autoplot()
```

Damped Holt's trend 모형에 의한 예측 결과도 그래프로 나타내 보자. 결과는 @fig-aus-air-fore2 에서 볼 수 있다.

```{r}
#| label: fig-aus-air-fore2
#| fig-cap: "`ausair` 자료에 대한 damped Holt's trend method의 예측 결과"
holt(ausair, h = 15, damped = TRUE) %>% 
  autoplot()
```

@fig-aus-air-fore1 에서 볼 수 있듯이 Holt's linear trend method에 의한 예측 결과는 지속적으로 증가하고 있으며, 반면에 damped Holt's trend method에 의한 예측 결과는 상승 기울기가 점점 줄어들고 있다는 것을 @fig-aus-air-fore2 에서 볼 수 있다.

-  Holt-Winters' seasonal method 예제: `fpp2::austourists`

`austourists`는 199년부터 2015년까지 분기별 호주에 입국한 외국인 관광객 수 자료이다. 시계열 그래프는 @fig-austour-1 에서 볼 수 있다.

```{r}
#| label: fig-austour-1
#| fig-cap: 199년부터 2015년까지 분기별 호주에 입국한 외국인 관광객 수
autoplot(austourists) +
  labs(y = NULL, title = "International Tourists to Australia")
```

Holt-Winters' seasonal 모형을 이용해서 예측을 실시해 보자. 먼저 가법 모형으로 예측을 실시하고 결과를 @fig-austour-2 에 그래프로 나타내 보자.

```{r}
#| label: fig-austour-2
#| fig-cap: "`austourists` 자료에 대한 Holt-Winters' additive seasonal method의 예측 결과"
hw(austourists) %>% 
  autoplot() + labs(y = NULL)
```

이번에는 승법 모형으로 예측을 실시하고 결과를 @fig-austour-3 에 그래프로 나타내 보자.

```{r}
#| label: fig-austour-3
#| fig-cap: "`austourists` 자료에 대한 Holt-Winters' multiplicative seasonal method의 예측 결과"
hw(austourists, seasonal = "multiplicative") %>% 
  autoplot() + labs(y = NULL)
```

## ETS 모형 {-}

-   예제 1: 1970년부터 2016년까지 연간 항공기 이용객 수 (`fpp2::ausair`)

`fpp2::ausair`는 1970년부터 2016년까지 호주의 연간 항공기 승객 수 자료이다. 먼저 전체 자료 중 1970년부터 2011년까지의 자료를 training data로 하고, 2012년 이후 자료를 test data로 분리하자.

```{r}
train_air <- window(ausair, end = 2011)
test_air <- window(ausair, start = 2012)
```

`train_air`와 `test_air`의 시계열 그래프는 @fig-ausair-plot 과 같다. `test_air`는 빨간 선으로 나타냈다.

```{r}
#| label: fig-ausair-plot
#| fig-cap: "`ausair` 자료의 시계열그래프"
autoplot(window(ausair, end = 2012)) +
  autolayer(window(ausair, start = 2012), size = .8) +
  labs(y = NULL, x = NULL) +
  theme(legend.position = "none")
```

함수 `ets()`로 ETS 모형을 적합하고, 그 결과를 확인해 보자.

```{r}
fit_air <- ets(train_air)
fit_air
```

최적 모형은 `r fit_air$method`으로 선정되었다. 즉, 추세는 additive이고 오차는 multiplicative이며, 계절요소가 없는 모형이 적합되었다. 평활모수는 $\alpha=$ `r summary(fit_air)$par[[1]] |> round(4)` , $\beta=$ `r summary(fit_air)$par[[2]] |> round(4)` 로 추정되었다. 따라서 시계열자료의 level에는 큰 변화가 있으나, 추세의 기울기에는 큰 변화 없이 일정하다는 것을 알 수 있다.

ETS 모형의 각 요소에 대한 추정 결과를 @fig-fit-air-comp 의 그래프로 나타내 보자.
관측된 자료의 시계열 그래프, 그리고 level의 추정 결과와 추세 기울기의 추정 결과의 시계열 그래프가 함께 작성되어 있다. 그래프 오른쪽 끝에 있는 동일한 높이의 막대가 표시되어 있어서 각 요소의 스케일을 비교할 수 있다.

```{r}
#| label: fig-fit-air-comp
#| fig-cap: ETS 모형의 각 요소에 대한 추정 결과 그래프
autoplot(fit_air)  
```

모형의 가정 만족 여부를 함수 `checkresiduals()`로 확인해 보자.
특별히 문제가 되는 가정 사항은 없는 것으로 보인다.

```{r}
checkresiduals(fit_air)
```

이제 예측을 실시하고 예측 오차에 대한 평가를 실시해 보자.

```{r}
fc_air <- forecast(fit_air, h = length(test_air))
accuracy(fc_air, test_air)
```

예측 결과를 그래프로 나타내 보자. 함수 `autoplot()`에 함수 `forecast()`의 결과인 객체 `fc_air`를 입력하면 training data와 예측 결과를 함께 나타낸다. 옵션 `include`는 그래프에 포함시킬 training data의 개수를 지정하는 것이다. 따라서 `include = 0`을 입력하면 예측 부분만을 확대한 효과를 볼 수 있다.
작성 결과는 @fig-aus-ETS-fore 에서 볼 수 있다. 

```{r}
#| label: fig-aus-ETS-fore
#| fig-cap: "`fpp2::ausair` 자료에 대한 ETS 모형의 예측 결과"
#| fig-width: 8
#| fig-height: 4
library(patchwork)
p1 <- autoplot(fc_air) + 
  autolayer(test_air, color = "red", size = .8) +
  labs(y = NULL, x = NULL) 
p2 <- autoplot(fc_air, include = 0) + 
  autolayer(test_air, color = "red", size=.8) +
  labs(y = NULL, x = NULL) 
p1 + p2
```

-   예제 2: 1999년부터 2015년까지 분기별 호주 입국 외국인 관광객 수 (`fpp2::austourists`)

`austourists`는 1999년부터 2015년까지 분기별로 호주에 입국한 외국인 관광객 수 자료이다. 2013년 4분기까지를 training data로 분리하고 2014년 1분기부터를 test data로 분리하자.

```{r}
train_tour <- window(austourists, end = c(2013, 4))
test_tour <- window(austourists, start = c(2014, 1))
```

두 자료의 시계열 그래프는 @fig-austour-plot 과 같다.
Test data는 빨간 선으로 표시했다. 상승 추세가 있으며, 명확한 계절요소가 있는 것을 알 수 있다. 
또한 계절요소의 진폭이 추세가 상승함에 따라 다소 증가하고 있는 것을 볼 수 있다.   

```{r}
#| label: fig-austour-plot
#| fig-cap: "`austourists` 자료의 시계열 그래프"
autoplot(window(austourists, end = c(2014,1))) +
  autolayer(window(austourists, start = c(2014,1)), size = .8) +
  labs(y = NULL) +
  theme(legend.position = "none")
```

함수 `ets()`로 최적 모형을 적합해 보자.

```{r}
fit_tour <- ets(train_tour)
fit_tour
```

`r fit_tour$method` 모형이 선택되었다. 승법 계절 성분이 선택되었다는 것은 계절 요소의 변동 폭이 증가한다는 의미가 된다. 이런 경우에 시계열자료를 로그변환 시킨 후 다시 ETS 모형을 적합시키면 가법 계절 모형이 선택될 것이다. 함수 `ets()`의 Box_Cox 변환 모수인 옵션 `lambda`에 0을 입력하면 로그변환된 자료를 대상으로 모형 적합이 이루어진다.

```{r}
fit_lntour <- ets(train_tour, lambda = 0)
fit_lntour
```

모형 `fit_tour`의 가정 만족 여부를 확인해 보자.

```{r}
checkresiduals(fit_tour)
```

모형 `fit_lntour`의 가정 만족 여부도 확인해 보자.

```{r}
checkresiduals(fit_lntour)
```

두 모형 모두 가정은 만족시키는 것으로 보인다. 이제 두 모형의 예측을 실시하고, 그 결과를 비교해 보자.

```{r}
fc_tour <- forecast(fit_tour, h = length(test_tour)) 
fc_lntour <- forecast(fit_lntour, h = length(test_tour))
```

```{r}
accuracy(fc_tour, test_tour)
accuracy(fc_lntour, test_tour)
```

모형 `r fit_lntour$method`인 `fit_lntour`의 test data에 대한 예측 오차가 조금 더 작은 것을 볼 수 있다.
두 모형의 예측 결과를 @fig-tour-ets-fore1 의 그래프로 비교해 보자.
함수 `autolayer()`에 `PI = FALSE`를 입력하면 예측 구간이 생략된다. 이것은 두 모형의 예측 구간이 함께 표시되면 서로 겹쳐지는 현상이 발생하기 때문에 생략한 것이다.
두 모형의 예측에는 큰 차이가 없음을 알 수 있다.

```{r}
#| label: fig-tour-ets-fore1
#| fig-cap: "`austourists` 자료에 대한 예측 결과 비교"
#| fig-width: 8
#| fig-height: 4
library(patchwork)
p1 <- autoplot(train_tour) +
  autolayer(test_tour, series = "Test data") +
  autolayer(fc_tour, PI = FALSE, series = "ETS(M,A,M)") +
  autolayer(fc_lntour, PI = FALSE, series = "ETS(A,A,A)") +
  labs(y = NULL, x = NULL, color = NULL) +
  theme(legend.position = "top")

p2 <- autoplot(test_tour, series = "Test data", size = .8) +
  autolayer(fc_tour, PI = FALSE, series = "ETS(M,A,M)", 
            size = .8) +
  autolayer(fc_lntour, PI = FALSE, series = "ETS(A,A,A)", 
            size = .8) +
  labs(y = NULL, x = NULL, color = NULL) +
  theme(legend.position = "top")

p1 + p2
```


모형 `r fit_lntour$method`인 `fit_lntour`의 test data에 대한 예측 결과를 예측 구간과 함께 @fig-tour-ets-fore3 의 그래프로 나타내 보자.

```{r}
#| label: fig-tour-ets-fore3
#| fig-cap: "`austourists` 자료에 대한 예측 결과"
#| fig-width: 8
#| fig-height: 4

library(patchwork)
p1 <- autoplot(fc_lntour) +
  autolayer(test_tour, color = "red", size = .8) +
  labs(x = NULL, y = NULL) 
p2 <- autoplot(fc_lntour, include = 0) +
  autolayer(test_tour, color = "red", size = .8) +
  labs(y = NULL, x = NULL) +
  scale_x_continuous(breaks = c(2014.0, 2014.5, 2015.0, 2015.5),
                     labels = c("2014.Q1", "2014.Q3", "2015.Q1",
                                "2015.Q3"))
p1 + p2
```

-   예제 3: 1965년 1월부터 1992년 7월까지 월별 실업 급여 수급 인원 수 (`fma::dole`)

`fma::dole`은 1965년 1월부터 1992년 7월까지 월별로 실업 급여를 받아간 인원 수 자료이다. 마지막 2년 자료를 test data로 분리해 보자.

```{r}
train_d <- window(dole, end = c(1990, 7))
test_d <- window(dole, start = c(1990, 8))
```

두 자료에 대한 시계열 그래프는 @fig-dole-plot 과 같다.
Test data는 빨간 선으로 표시했다.
1990년부터 갑작스런 증가세를 보이고 있으며, test data가 대부분 그 시기에 관측된 것이다. 따라서 예측이 상당히 어려운 것으로 보이는 상황이다.

```{r}
#| label: fig-dole-plot
#| fig-cap: "`dole` 자료의 시계열그래프"

autoplot(train_d) + 
  autolayer(test_d, show.legend=FALSE, size = .8) +
  labs(y = NULL, x = NULL)
```

ETS 모형을 적합해 보자.

```{r}
fit_d <- ets(train_d)
fit_d
```

가정 만족 여부를 확인해 보니, 독립성 가정에 문제가 있는 것을 볼 수 있다. 이런 경우, 점 예측값 (point forecast)에는 별다른 문제가 없겠지만, 예측 구간을 신뢰하기 어렵다고 할 수 있다.

```{r}
checkresiduals(fit_d)
```

예측을 실시하고 평가해 보자.

```{r}
fc_d <- forecast(fit_d, h = length(test_d))
accuracy(fc_d, test_d)
```

MASE 값이 지나치게 큰 값이라는 것을 알 수 있다. 예측 결과를 @fig-dole-fore1 의 그래프로 나타내 보자.

```{r}
#| label: fig-dole-fore1
#| fig-cap: "`dole` 자료에 대한 예측 결과"
autoplot(fc_d) +
  autolayer(test_d, color = "red", size = .8) +
  labs(y = NULL, x = NULL) 
```

예측이 완벽하게 벗어난 것을 볼 수 있다. 이와 같이 실업자 수가 갑작스럽게 증가하는 상황에서는 과거 자료만을 이용하는 시계열 모형으로는 효율적인 예측이 불가능하다고 하겠다. 

Test data에서 발생한 갑작스런 변화의 충격을 완화시키는 방법으로 test data의 기간 축소를 생각할 수 있다.
이렇게 되면, 증가 추세가 training data에도 어느 정도 반영될 수 있을 것이다. 
하지만 이 방법은 자료의 추세를 먼저 확인하고 test data의 기간을 변경하는 것이어서 정당한 자료 분리 방법은 아니라고 할 수 있다.
마지막 1년만을 test data로 남겨 놓고 모형 적합을 시도해 보자. 자료분리는 함수 `subset()`으로도 진행할 수 있다. 옵션 `end`와 `start`에 벡터에서 적용되는 방식의 인덱스를 지정할 수 있다.

```{r}
train_d_1 <- subset(dole, end = length(dole) - 12)
test_d_1 <- subset(dole, start = length(dole) - 11)
```

변경된 training data를 사용해서 적합된 모형으로 마지막 1년 자료에 대한 예측을 실시해 보자.
훨씬 개선된 결과를 볼 수 있다.

```{r}
fc_d_1 <- train_d_1 %>% 
  ets() %>% 
  forecast(h = length(test_d_1))
```

```{r}
accuracy(fc_d_1, test_d_1)
```

이제 예측 결과를 그림 @fig-dole-fore-2)의 그래프로 나타내 보자.

```{r}
#| label: fig-dole-fore-2
#| fig-cap: "`dole` 자료에 대한 예측 결과"
#| fig-width: 8
#| fig-height: 4

library(patchwork)
p1 <- autoplot(fc_d_1) + 
  autolayer(test_d_1, color = "red", size = .8) +
  labs(y = NULL, x = NULL) 
p2 <- autoplot(fc_d_1, include = 0) +
  autolayer(test_d_1, color = "red", size = .8) +
  labs(y = NULL, x = NULL) 
p1 + p2
```

-   예제 4: 2014년 4월 30일부터 1년간 Hyndsight 블로그 일일 방문자 수 (`fpp2::hyndsight`)

`hyndsight`는 2014년 4월 30일부터 1년간 Hyndman이 운영하는 블로그에 방문한 일일 방문자 수 자료이다.
자료의 시계열그래프는 @fig-hynd-plot 에서 볼 수 있다. 

```{r}
#| label: fig-hynd-plot
#| fig-cap: "`hyndsight` 자료의 시계열그래프"
autoplot(hyndsight) + labs(x = NULL, y = NULL)
```

일일 자료의 경우에 요일의 영향을 받는 자료라면 $m=7$의 계절 주기를 갖게 된다. 자료 분리를 위해 2014년 4월 30일이 무슨 요일인지 확인해 보자.

```{r}
lubridate::wday(as.Date("2014-4-30"), label = TRUE)
```

```{r}
start(hyndsight); end(hyndsight)
```

2014년 4월 30일은 수요일이며, 자료의 시작 시점은 1주 4일 (수)이고 종료 시점은 53주 4일 (수)이 된다. Training data는 1주 4일부터 48주 4일까지로 하고, test data는 48주 5일부터 53주 4일까지 5주간으로 설정하자.

자료 분리는 함수 `window()`로 보통 진행하지만, 이렇게 자료의 개수로 분리하는 것이 더 편리한 경우에는 함수 `subset()`으로 진행 할 수 있다. 즉, 마지막 35일 자료를 test data로 분리해 보자.

```{r}
train_hyn <- subset(hyndsight, end = length(hyndsight)-35)
test_hyn <- subset(hyndsight, start = length(hyndsight)-34)
```

ETS 모형을 적합해 보자. 추세는 없고, 오차와 계절 성분이 모두 가법 형태인 모형이 선택되었다.

```{r}
fit_hyn <- ets(train_hyn)
fit_hyn
```

이제 예측을 진행해 보자.

```{r}
fc_hyn <- forecast(fit_hyn, h = length(test_hyn))
accuracy(fc_hyn, test_hyn)
```

예측 결과를 @fig-hyn-fore 의 그래프와 같이 작성해 보자.
빨간 실선은 test data이고, 파란 실선이 예측 결과이다. 
예측 구간은 80%와 95% 수준에서 각각 계산되는 것이 디폴트이며,
80% 예측 구간은 짙은 색으로 표시되고, 95% 예측 구간은 옅은 색으로 표시된다. 

```{r}
#| label: fig-hyn-fore
#| fig-cap: "`hynsight` 자료에 대한 예측 결과"
autoplot(fc_hyn, include = 0) +
  autolayer(test_hyn, color = "red", size = .8) +
  labs(x = NULL, y = NULL) 
```



## 연습문제 {-}

**1.** 다음의 자료에 대하여 ETS 모형을 적합하고, 적합 결과를 설명해 보자. 

- `fma::chicken`

- `fma::ibmclose`

**2.** 다음 자료에 대하여 ETS 모형을 적합하고 예측을 실시해 보자. 
Test data는 마지막 2년으로 하며, 적합 및 예측 결과에 대해 설명해 보자. 
자료는 웹 서버 `https://raw.githubusercontent.com/yjyjpark/TS-with-R/main/Data/` 에서 불러올 수 있다.

- 서울시 월별 평균 기온 자료 : `Seoul_temp.csv`

- 수원시 월별 평균 기온 자료 : `Suwon_temp.csv`

- 백령도에서 측정된 월별 미세먼지 농도 자료 : `Baek_pm10.csv`

- 서울시에서 측정된 월별 미세먼지 농도 자료 : `Seoul_pm10.csv`

- 수원시에서 측정된 월별 미세먼지 농도 자료 : `Suwon_pm10.csv`


**3.** 미국 달러에 대한 한국 원화 환율 자료 `Won_USD.csv`에 대한 다음의 작업을 진행해 보자. Test data는 마지막 2년으로 한다. 

- ETS 모형을 적합하고 분해법 모형의 적합 결과와 비교해서 차이를 설명하라.

- ETS 모형에 의한 예측을 실시해 보자.   



